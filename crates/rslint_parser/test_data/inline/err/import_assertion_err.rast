JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsImport {
            import_token: IMPORT_KW@0..7 "import" [] [Whitespace(" ")],
            import_clause: JsImportBareClause {
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@7..13 "\"foo\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assert_token: ASSERT_KW@13..20 "assert" [] [Whitespace(" ")],
                    l_curly_token: L_CURLY@20..22 "{" [] [Whitespace(" ")],
                    assertions: JsImportAssertionEntryList [
                        JsImportAssertionEntry {
                            key: IDENT@22..26 "type" [] [],
                            colon_token: missing (required),
                            value_token: missing (required),
                        },
                        COMMA@26..28 "," [] [Whitespace(" ")],
                        JsImportAssertionEntry {
                            key: JS_STRING_LITERAL@28..35 "\"json\"" [] [Whitespace(" ")],
                            colon_token: missing (required),
                            value_token: missing (required),
                        },
                    ],
                    r_curly_token: R_CURLY@35..36 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@36..37 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@37..45 "import" [Whitespace("\n")] [Whitespace(" ")],
            import_clause: JsImportBareClause {
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@45..51 "\"bar\"" [] [Whitespace(" ")],
                },
                assertion: missing (optional),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@51..63 "\\u{61}ssert" [] [Whitespace(" ")],
                },
            },
            semicolon_token: missing (optional),
        },
        JsBlockStatement {
            l_curly_token: L_CURLY@63..65 "{" [] [Whitespace(" ")],
            statements: JsStatementList [
                JsLabeledStatement {
                    label_token: IDENT@65..69 "type" [] [],
                    colon_token: COLON@69..71 ":" [] [Whitespace(" ")],
                    body: JsExpressionStatement {
                        expression: JsStringLiteralExpression {
                            value_token: JS_STRING_LITERAL@71..78 "\"json\"" [] [Whitespace(" ")],
                        },
                        semicolon_token: missing (optional),
                    },
                },
            ],
            r_curly_token: R_CURLY@78..79 "}" [] [],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@79..80 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@80..88 "import" [Whitespace("\n")] [Whitespace(" ")],
            import_clause: JsImportNamedClause {
                default_specifier: missing (optional),
                named_import: JsNamedImportSpecifiers {
                    l_curly_token: L_CURLY@88..90 "{" [] [Whitespace(" ")],
                    specifiers: JsNamedImportSpecifierList [
                        JsShorthandNamedImportSpecifier {
                            local_name: JsIdentifierBinding {
                                name_token: IDENT@90..94 "foo" [] [Whitespace(" ")],
                            },
                        },
                    ],
                    r_curly_token: R_CURLY@94..96 "}" [] [Whitespace(" ")],
                },
                from_token: missing (required),
                source: missing (required),
                assertion: JsImportAssertion {
                    assert_token: ASSERT_KW@96..103 "assert" [] [Whitespace(" ")],
                    l_curly_token: L_CURLY@103..105 "{" [] [Whitespace(" ")],
                    assertions: JsImportAssertionEntryList [
                        JsImportAssertionEntry {
                            key: IDENT@105..109 "type" [] [],
                            colon_token: COLON@109..111 ":" [] [Whitespace(" ")],
                            value_token: JS_STRING_LITERAL@111..118 "\"json\"" [] [Whitespace(" ")],
                        },
                    ],
                    r_curly_token: R_CURLY@118..119 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@119..120 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@120..128 "import" [Whitespace("\n")] [Whitespace(" ")],
            import_clause: JsImportBareClause {
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@128..135 "\"lorem\"" [] [],
                },
                assertion: missing (optional),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@135..143 "assert" [Whitespace("\n")] [Whitespace(" ")],
                },
            },
            semicolon_token: missing (optional),
        },
        JsBlockStatement {
            l_curly_token: L_CURLY@143..145 "{" [] [Whitespace(" ")],
            statements: JsStatementList [
                JsLabeledStatement {
                    label_token: IDENT@145..149 "type" [] [],
                    colon_token: COLON@149..151 ":" [] [Whitespace(" ")],
                    body: JsExpressionStatement {
                        expression: JsStringLiteralExpression {
                            value_token: JS_STRING_LITERAL@151..158 "\"json\"" [] [Whitespace(" ")],
                        },
                        semicolon_token: missing (optional),
                    },
                },
            ],
            r_curly_token: R_CURLY@158..159 "}" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@159..167 "import" [Whitespace("\n")] [Whitespace(" ")],
            import_clause: JsImportDefaultClause {
                local_name: JsIdentifierBinding {
                    name_token: IDENT@167..171 "foo" [] [Whitespace(" ")],
                },
                from_token: FROM_KW@171..176 "from" [] [Whitespace(" ")],
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@176..187 "\"foo.json\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assert_token: ASSERT_KW@187..194 "assert" [] [Whitespace(" ")],
                    l_curly_token: L_CURLY@194..196 "{" [] [Whitespace(" ")],
                    assertions: JsImportAssertionEntryList [
                        JsImportAssertionEntry {
                            key: JS_STRING_LITERAL@196..202 "\"type\"" [] [],
                            colon_token: COLON@202..204 ":" [] [Whitespace(" ")],
                            value_token: JS_STRING_LITERAL@204..210 "\"json\"" [] [],
                        },
                        COMMA@210..212 "," [] [Whitespace(" ")],
                        JsUnknownImportAssertionEntry {
                            items: [
                                IDENT@212..216 "type" [] [],
                                COLON@216..218 ":" [] [Whitespace(" ")],
                                JS_STRING_LITERAL@218..224 "\"html\"" [] [],
                            ],
                        },
                        COMMA@224..226 "," [] [Whitespace(" ")],
                        JsUnknownImportAssertionEntry {
                            items: [
                                JS_STRING_LITERAL@226..232 "\"type\"" [] [],
                                COLON@232..234 ":" [] [Whitespace(" ")],
                                JS_STRING_LITERAL@234..239 "\"js\"" [] [Whitespace(" ")],
                            ],
                        },
                    ],
                    r_curly_token: R_CURLY@239..240 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@240..241 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@241..249 "import" [Whitespace("\n")] [Whitespace(" ")],
            import_clause: JsImportBareClause {
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@249..253 "\"x\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assert_token: ASSERT_KW@253..259 "assert" [] [],
                    l_curly_token: missing (required),
                    assertions: JsImportAssertionEntryList [],
                    r_curly_token: missing (required),
                },
            },
            semicolon_token: SEMICOLON@259..260 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@260..268 "import" [Whitespace("\n")] [Whitespace(" ")],
            import_clause: JsImportDefaultClause {
                local_name: JsIdentifierBinding {
                    name_token: IDENT@268..274 "ipsum" [] [Whitespace(" ")],
                },
                from_token: FROM_KW@274..279 "from" [] [Whitespace(" ")],
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@279..292 "\"ipsum.json\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assert_token: ASSERT_KW@292..299 "assert" [] [Whitespace(" ")],
                    l_curly_token: L_CURLY@299..301 "{" [] [Whitespace(" ")],
                    assertions: JsImportAssertionEntryList [
                        JsImportAssertionEntry {
                            key: IDENT@301..305 "type" [] [],
                            colon_token: COLON@305..307 ":" [] [Whitespace(" ")],
                            value_token: JS_STRING_LITERAL@307..313 "\"json\"" [] [],
                        },
                        COMMA@313..315 "," [] [Whitespace(" ")],
                        JsImportAssertionEntry {
                            key: IDENT@315..319 "lazy" [] [],
                            colon_token: COLON@319..321 ":" [] [Whitespace(" ")],
                            value_token: missing (required),
                        },
                        missing separator,
                        JsImportAssertionEntry {
                            key: IDENT@321..325 "true" [] [],
                            colon_token: missing (required),
                            value_token: missing (required),
                        },
                        COMMA@325..327 "," [] [Whitespace(" ")],
                        JsImportAssertionEntry {
                            key: IDENT@327..338 "startAtLine" [] [],
                            colon_token: COLON@338..340 ":" [] [Whitespace(" ")],
                            value_token: missing (required),
                        },
                        missing separator,
                        JsUnknownImportAssertionEntry {
                            items: [
                                JS_NUMBER_LITERAL@340..342 "1" [] [Whitespace(" ")],
                            ],
                        },
                    ],
                    r_curly_token: R_CURLY@342..343 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@343..344 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@344..352 "import" [Whitespace("\n")] [Whitespace(" ")],
            import_clause: JsImportNamedClause {
                default_specifier: missing (optional),
                named_import: JsNamedImportSpecifiers {
                    l_curly_token: L_CURLY@352..354 "{" [] [Whitespace(" ")],
                    specifiers: JsNamedImportSpecifierList [
                        JsShorthandNamedImportSpecifier {
                            local_name: JsIdentifierBinding {
                                name_token: IDENT@354..356 "a" [] [Whitespace(" ")],
                            },
                        },
                    ],
                    r_curly_token: R_CURLY@356..358 "}" [] [Whitespace(" ")],
                },
                from_token: FROM_KW@358..363 "from" [] [Whitespace(" ")],
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@363..372 "\"a.json\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assert_token: ASSERT_KW@372..378 "assert" [] [],
                    l_curly_token: missing (required),
                    assertions: JsImportAssertionEntryList [],
                    r_curly_token: missing (required),
                },
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@378..379 "" [Whitespace("\n")] [],
}

0: JS_MODULE@0..379
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..378
    0: JS_IMPORT@0..37
      0: IMPORT_KW@0..7 "import" [] [Whitespace(" ")]
      1: JS_IMPORT_BARE_CLAUSE@7..36
        0: JS_MODULE_SOURCE@7..13
          0: JS_STRING_LITERAL@7..13 "\"foo\"" [] [Whitespace(" ")]
        1: JS_IMPORT_ASSERTION@13..36
          0: ASSERT_KW@13..20 "assert" [] [Whitespace(" ")]
          1: L_CURLY@20..22 "{" [] [Whitespace(" ")]
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@22..35
            0: JS_IMPORT_ASSERTION_ENTRY@22..26
              0: IDENT@22..26 "type" [] []
              1: (empty)
              2: (empty)
            1: COMMA@26..28 "," [] [Whitespace(" ")]
            2: JS_IMPORT_ASSERTION_ENTRY@28..35
              0: JS_STRING_LITERAL@28..35 "\"json\"" [] [Whitespace(" ")]
              1: (empty)
              2: (empty)
          3: R_CURLY@35..36 "}" [] []
      2: SEMICOLON@36..37 ";" [] []
    1: JS_IMPORT@37..51
      0: IMPORT_KW@37..45 "import" [Whitespace("\n")] [Whitespace(" ")]
      1: JS_IMPORT_BARE_CLAUSE@45..51
        0: JS_MODULE_SOURCE@45..51
          0: JS_STRING_LITERAL@45..51 "\"bar\"" [] [Whitespace(" ")]
        1: (empty)
      2: (empty)
    2: JS_EXPRESSION_STATEMENT@51..63
      0: JS_IDENTIFIER_EXPRESSION@51..63
        0: JS_REFERENCE_IDENTIFIER@51..63
          0: IDENT@51..63 "\\u{61}ssert" [] [Whitespace(" ")]
      1: (empty)
    3: JS_BLOCK_STATEMENT@63..79
      0: L_CURLY@63..65 "{" [] [Whitespace(" ")]
      1: JS_STATEMENT_LIST@65..78
        0: JS_LABELED_STATEMENT@65..78
          0: IDENT@65..69 "type" [] []
          1: COLON@69..71 ":" [] [Whitespace(" ")]
          2: JS_EXPRESSION_STATEMENT@71..78
            0: JS_STRING_LITERAL_EXPRESSION@71..78
              0: JS_STRING_LITERAL@71..78 "\"json\"" [] [Whitespace(" ")]
            1: (empty)
      2: R_CURLY@78..79 "}" [] []
    4: JS_EMPTY_STATEMENT@79..80
      0: SEMICOLON@79..80 ";" [] []
    5: JS_IMPORT@80..120
      0: IMPORT_KW@80..88 "import" [Whitespace("\n")] [Whitespace(" ")]
      1: JS_IMPORT_NAMED_CLAUSE@88..119
        0: (empty)
        1: JS_NAMED_IMPORT_SPECIFIERS@88..96
          0: L_CURLY@88..90 "{" [] [Whitespace(" ")]
          1: JS_NAMED_IMPORT_SPECIFIER_LIST@90..94
            0: JS_SHORTHAND_NAMED_IMPORT_SPECIFIER@90..94
              0: JS_IDENTIFIER_BINDING@90..94
                0: IDENT@90..94 "foo" [] [Whitespace(" ")]
          2: R_CURLY@94..96 "}" [] [Whitespace(" ")]
        2: (empty)
        3: (empty)
        4: JS_IMPORT_ASSERTION@96..119
          0: ASSERT_KW@96..103 "assert" [] [Whitespace(" ")]
          1: L_CURLY@103..105 "{" [] [Whitespace(" ")]
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@105..118
            0: JS_IMPORT_ASSERTION_ENTRY@105..118
              0: IDENT@105..109 "type" [] []
              1: COLON@109..111 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@111..118 "\"json\"" [] [Whitespace(" ")]
          3: R_CURLY@118..119 "}" [] []
      2: SEMICOLON@119..120 ";" [] []
    6: JS_IMPORT@120..135
      0: IMPORT_KW@120..128 "import" [Whitespace("\n")] [Whitespace(" ")]
      1: JS_IMPORT_BARE_CLAUSE@128..135
        0: JS_MODULE_SOURCE@128..135
          0: JS_STRING_LITERAL@128..135 "\"lorem\"" [] []
        1: (empty)
      2: (empty)
    7: JS_EXPRESSION_STATEMENT@135..143
      0: JS_IDENTIFIER_EXPRESSION@135..143
        0: JS_REFERENCE_IDENTIFIER@135..143
          0: IDENT@135..143 "assert" [Whitespace("\n")] [Whitespace(" ")]
      1: (empty)
    8: JS_BLOCK_STATEMENT@143..159
      0: L_CURLY@143..145 "{" [] [Whitespace(" ")]
      1: JS_STATEMENT_LIST@145..158
        0: JS_LABELED_STATEMENT@145..158
          0: IDENT@145..149 "type" [] []
          1: COLON@149..151 ":" [] [Whitespace(" ")]
          2: JS_EXPRESSION_STATEMENT@151..158
            0: JS_STRING_LITERAL_EXPRESSION@151..158
              0: JS_STRING_LITERAL@151..158 "\"json\"" [] [Whitespace(" ")]
            1: (empty)
      2: R_CURLY@158..159 "}" [] []
    9: JS_IMPORT@159..241
      0: IMPORT_KW@159..167 "import" [Whitespace("\n")] [Whitespace(" ")]
      1: JS_IMPORT_DEFAULT_CLAUSE@167..240
        0: JS_IDENTIFIER_BINDING@167..171
          0: IDENT@167..171 "foo" [] [Whitespace(" ")]
        1: FROM_KW@171..176 "from" [] [Whitespace(" ")]
        2: JS_MODULE_SOURCE@176..187
          0: JS_STRING_LITERAL@176..187 "\"foo.json\"" [] [Whitespace(" ")]
        3: JS_IMPORT_ASSERTION@187..240
          0: ASSERT_KW@187..194 "assert" [] [Whitespace(" ")]
          1: L_CURLY@194..196 "{" [] [Whitespace(" ")]
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@196..239
            0: JS_IMPORT_ASSERTION_ENTRY@196..210
              0: JS_STRING_LITERAL@196..202 "\"type\"" [] []
              1: COLON@202..204 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@204..210 "\"json\"" [] []
            1: COMMA@210..212 "," [] [Whitespace(" ")]
            2: JS_UNKNOWN_IMPORT_ASSERTION_ENTRY@212..224
              0: IDENT@212..216 "type" [] []
              1: COLON@216..218 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@218..224 "\"html\"" [] []
            3: COMMA@224..226 "," [] [Whitespace(" ")]
            4: JS_UNKNOWN_IMPORT_ASSERTION_ENTRY@226..239
              0: JS_STRING_LITERAL@226..232 "\"type\"" [] []
              1: COLON@232..234 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@234..239 "\"js\"" [] [Whitespace(" ")]
          3: R_CURLY@239..240 "}" [] []
      2: SEMICOLON@240..241 ";" [] []
    10: JS_IMPORT@241..260
      0: IMPORT_KW@241..249 "import" [Whitespace("\n")] [Whitespace(" ")]
      1: JS_IMPORT_BARE_CLAUSE@249..259
        0: JS_MODULE_SOURCE@249..253
          0: JS_STRING_LITERAL@249..253 "\"x\"" [] [Whitespace(" ")]
        1: JS_IMPORT_ASSERTION@253..259
          0: ASSERT_KW@253..259 "assert" [] []
          1: (empty)
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@259..259
          3: (empty)
      2: SEMICOLON@259..260 ";" [] []
    11: JS_IMPORT@260..344
      0: IMPORT_KW@260..268 "import" [Whitespace("\n")] [Whitespace(" ")]
      1: JS_IMPORT_DEFAULT_CLAUSE@268..343
        0: JS_IDENTIFIER_BINDING@268..274
          0: IDENT@268..274 "ipsum" [] [Whitespace(" ")]
        1: FROM_KW@274..279 "from" [] [Whitespace(" ")]
        2: JS_MODULE_SOURCE@279..292
          0: JS_STRING_LITERAL@279..292 "\"ipsum.json\"" [] [Whitespace(" ")]
        3: JS_IMPORT_ASSERTION@292..343
          0: ASSERT_KW@292..299 "assert" [] [Whitespace(" ")]
          1: L_CURLY@299..301 "{" [] [Whitespace(" ")]
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@301..342
            0: JS_IMPORT_ASSERTION_ENTRY@301..313
              0: IDENT@301..305 "type" [] []
              1: COLON@305..307 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@307..313 "\"json\"" [] []
            1: COMMA@313..315 "," [] [Whitespace(" ")]
            2: JS_IMPORT_ASSERTION_ENTRY@315..321
              0: IDENT@315..319 "lazy" [] []
              1: COLON@319..321 ":" [] [Whitespace(" ")]
              2: (empty)
            3: (empty)
            4: JS_IMPORT_ASSERTION_ENTRY@321..325
              0: IDENT@321..325 "true" [] []
              1: (empty)
              2: (empty)
            5: COMMA@325..327 "," [] [Whitespace(" ")]
            6: JS_IMPORT_ASSERTION_ENTRY@327..340
              0: IDENT@327..338 "startAtLine" [] []
              1: COLON@338..340 ":" [] [Whitespace(" ")]
              2: (empty)
            7: (empty)
            8: JS_UNKNOWN_IMPORT_ASSERTION_ENTRY@340..342
              0: JS_NUMBER_LITERAL@340..342 "1" [] [Whitespace(" ")]
          3: R_CURLY@342..343 "}" [] []
      2: SEMICOLON@343..344 ";" [] []
    12: JS_IMPORT@344..378
      0: IMPORT_KW@344..352 "import" [Whitespace("\n")] [Whitespace(" ")]
      1: JS_IMPORT_NAMED_CLAUSE@352..378
        0: (empty)
        1: JS_NAMED_IMPORT_SPECIFIERS@352..358
          0: L_CURLY@352..354 "{" [] [Whitespace(" ")]
          1: JS_NAMED_IMPORT_SPECIFIER_LIST@354..356
            0: JS_SHORTHAND_NAMED_IMPORT_SPECIFIER@354..356
              0: JS_IDENTIFIER_BINDING@354..356
                0: IDENT@354..356 "a" [] [Whitespace(" ")]
          2: R_CURLY@356..358 "}" [] [Whitespace(" ")]
        2: FROM_KW@358..363 "from" [] [Whitespace(" ")]
        3: JS_MODULE_SOURCE@363..372
          0: JS_STRING_LITERAL@363..372 "\"a.json\"" [] [Whitespace(" ")]
        4: JS_IMPORT_ASSERTION@372..378
          0: ASSERT_KW@372..378 "assert" [] []
          1: (empty)
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@378..378
          3: (empty)
      2: (empty)
  3: EOF@378..379 "" [Whitespace("\n")] []
--
error[SyntaxError]: expected `:` but instead found `,`
  ┌─ import_assertion_err.js:1:27
  │
1 │ import "foo" assert { type, "json" };
  │                           ^ unexpected

--
error[SyntaxError]: expected `:` but instead found `}`
  ┌─ import_assertion_err.js:1:36
  │
1 │ import "foo" assert { type, "json" };
  │                                    ^ unexpected

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ import_assertion_err.js:2:14
  │
2 │ import "bar" \u{61}ssert { type: "json" };
  │ -------------^^^^^^^^^^^ An explicit or implicit semicolon is expected here...
  │ │             
  │ ...Which is required to end this statement

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ import_assertion_err.js:2:26
  │
2 │ import "bar" \u{61}ssert { type: "json" };
  │              ------------^
  │              │           │
  │              │           An explicit or implicit semicolon is expected here...
  │              ...Which is required to end this statement

--
error[SyntaxError]: expected `from` but instead found `assert`
  ┌─ import_assertion_err.js:3:16
  │
3 │ import { foo } assert { type: "json" };
  │                ^^^^^^ unexpected

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ import_assertion_err.js:5:8
  │
5 │ assert { type: "json" }
  │ -------^
  │ │      │
  │ │      An explicit or implicit semicolon is expected here...
  │ ...Which is required to end this statement

--
error[SyntaxError]: The binding "foo" has been already declared
  ┌─ import_assertion_err.js:3:10
  │
3 │ import { foo } assert { type: "json" };
  │          ^^^ First declaration here
  ·
6 │ import foo from "foo.json" assert { "type": "json", type: "html", "type": "js" };
  │        --- Second declaration here

--
error[SyntaxError]: Duplicate assertion keys are not allowed
  ┌─ import_assertion_err.js:6:37
  │
6 │ import foo from "foo.json" assert { "type": "json", type: "html", "type": "js" };
  │                                     ^^^^^^          ---- second use here
  │                                     │                
  │                                     First use of the key `type`

--
error[SyntaxError]: expected `'{'` but instead found `;`
  ┌─ import_assertion_err.js:7:18
  │
7 │ import "x" assert;
  │                  ^ unexpected

--
error[SyntaxError]: expected `string literal` but instead found `true`
  ┌─ import_assertion_err.js:8:61
  │
8 │ import ipsum from "ipsum.json" assert { type: "json", lazy: true, startAtLine: 1 };
  │                                                             ^^^^ unexpected

--
error[SyntaxError]: expected `:` but instead found `,`
  ┌─ import_assertion_err.js:8:65
  │
8 │ import ipsum from "ipsum.json" assert { type: "json", lazy: true, startAtLine: 1 };
  │                                                                 ^ unexpected

--
error[SyntaxError]: expected `string literal` but instead found `1`
  ┌─ import_assertion_err.js:8:80
  │
8 │ import ipsum from "ipsum.json" assert { type: "json", lazy: true, startAtLine: 1 };
  │                                                                                ^ unexpected

--
error[SyntaxError]: expected `'{'` but instead the file ends
   ┌─ import_assertion_err.js:10:1
   │
10 │ 
   │ ^ the file ends here

--
import "foo" assert { type, "json" };
import "bar" \u{61}ssert { type: "json" };
import { foo } assert { type: "json" };
import "lorem"
assert { type: "json" }
import foo from "foo.json" assert { "type": "json", type: "html", "type": "js" };
import "x" assert;
import ipsum from "ipsum.json" assert { type: "json", lazy: true, startAtLine: 1 };
import { a } from "a.json" assert
